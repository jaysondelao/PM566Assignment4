---
title: "Assignment 04-HPC and SQL"
author: "Jayson De La O"
format:
  html:
    embed-resources: true
---
```{r}
library(parallel)
library(microbenchmark)
```



HPC
Make things run faster
```{r}
# Total row sums
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

fun1alt <- function(mat) {
  # YOUR CODE HERE
  rowSums(mat)
}

# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}

fun2alt <- function(mat) {
  # YOUR CODE HERE
 t(apply(mat,1,cumsum))
}
```


Question 1
Using the dataset generated below (dat), check that the output of both of your new functions matches the output of the original functions. Then use microbenchmark to check that your version is actually faster.


Microbench mark output shows both alt functions are fasters than there counterpart function.
```{r}
# Use the data with this code
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

# Test for the first
microbenchmark::microbenchmark(
  fun1(dat),
  fun1alt(dat), unit = "relative"
)

# Test for the second
microbenchmark::microbenchmark(
  fun2(dat),
  fun2alt(dat), unit = "relative"
)


```



Confirms matching output for both fun1/fun1alt functions
```{r}
fun1(dat)[1:10]
fun1alt(dat)[1:10]
```
Confirms matching output for both fun2/fun2alt functions
```{r}
fun2(dat)[1:10]
fun2alt(dat)[1:10]
```



Make things run faster with parallel computing
The following function allows simulating pi:
```{r}
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132
```

In order to get accurate estimates, we can run this function multiple times, with the following code:
```{r}
# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})
```

Question 2
Rewrite the previous code using parLapply() (or your parallelization method of choice) to parallelize it. Run the code once, using system.time(), to show that your version is faster.

system.time results confirm the rewritten parrelalization is faster.
```{r}
# YOUR CODE HERE

cl <-makeCluster(4L)

system.time({
  clusterExport(cl,"sim_pi") 
  # YOUR CODE HERE
  ans <-unlist(parLapply(
    cl=cl,1:4000, function(i) sim_pi(n=10000)
    ) )# YOUR CODE HERE
  print(mean(ans))
  # YOUR CODE HERE
  stopCluster(cl)
})


```



SQL
Setup a temporary database by running the following chunk
```{r}
# install.packages(c("RSQLite", "DBI"))

library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```

Question 3
How many many movies are available in each rating category?

Look at tables using:
SELECT *
FROM film
SELECT *
FROM film_category
SELECT *
FROM category

rating g: 180
       NC-17: 210
       PG:194
       PG-13:223
       R:195
```{sql, connection=con}
SELECT rating,
COUNT(*) AS count
FROM film
GROUP BY rating



```



Question 4
What is the average replacement cost and rental rate for each rating category?

Averages are in the results below
```{sql, connection=con}
SELECT rating,
AVG(replacement_cost) AS avg_replacement_cost,
AVG(rental_rate) AS avg_rental_rate
FROM film
GROUP BY rating

```


Question 5
Use table film_category together with film to find how many films there are with each category ID.


counts for each of the 16 categories 
```{sql, connection=con}
SELECT  film_category.category_id,
COUNT(*) AS count
FROM film
  INNER JOIN film_category 
WHERE film.film_id=film_category.film_id 
 GROUP BY category_id
```


Question 6
Incorporate the category table into the answer to the previous question to find the name of the most popular category.

Sports is the most popular category.
```{sql, connection=con}
SELECT name,
COUNT(*) AS count
FROM film
INNER JOIN film_category
ON film.film_id = film_category.film_id
INNER JOIN category
ON film_category.category_id= category.category_id
GROUP BY category.category_id
ORDER BY count(*) DESC Limit(1)
```



```{r}
# clean up
dbDisconnect(con)
```


